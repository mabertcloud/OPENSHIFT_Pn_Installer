<?xml version='1.0'?>
<!DOCTYPE policy PUBLIC
      "-//JBoss//DTD JBOSS Security Config 3.0//EN"
      "http://www.jboss.org/j2ee/dtd/security_config.dtd">

<!-- The XML based JAAS login configuration read by the
org.jboss.security.auth.login.XMLLoginConfig mbean. Add
an application-policy element for each security domain.

The outline of the application-policy is:
<application-policy name="security-domain-name">
  <authentication>
    <login-module code="login.module1.class.name" flag="control_flag">
      <module-option name = "option1-name">option1-value</module-option>
      <module-option name = "option2-name">option2-value</module-option>
      ...
    </login-module>

    <login-module code="login.module2.class.name" flag="control_flag">
      ...
    </login-module>
    ...
  </authentication>
</application-policy>

$Revision: 1.5 $
-->

<policy>
	<application-policy name="PlanonSecurityDomain">
		<!-- Used by Planon.
		-->
		<!--

		The following section contains the planon login modules. The JBossUpgradeUserLoginModule just checks for 
		UpgradeMode and Upgrade user; it fails in UpgradeMode UNLESS the user is SYSUPGRADE or DEVUPGRADE. 
		If it succeeds, control will return to the application. If it fails, authentication will continue 
		applying the next configured (required) module, which typically is authentication against some 
		store (LDAP, PLANUSER table, etc etc)

    	-->
		<authentication>
			<!-- JBoss specific InitModule: Only SYSINIT user is allowed in initialize mode.
			       This module is marked 'sufficient', it will only succeed in initialize mode, only allowing user SYSINIT, skipping the remaining modules
			       The Init user login module is required to load and start the Planon Bundles.
			-->
			<login-module code="nl.planon.artemis.server.jboss.JBossInitUserLoginModule" flag="sufficient"/>
				
			<login-module code="nl.planon.artemis.server.TrustedServiceServerLoginModule" flag="sufficient" />

      <login-module code="nl.planon.artemis.server.jboss.JBossUpgradeUserLoginModule" flag="sufficient"/>

			<!-- JBoss specific ServerLoginModule: Planon default user authentication -->
	    		<login-module code="nl.planon.artemis.server.jboss.JBossServerLoginModule" flag="optional"/>

    			<!-- this loginmodule will grant the Planon role. More roles can be added if needed by 
				extending the list using a comma as separator -->
    			<login-module code="nl.planon.artemis.server.CommitPlanonUserLoginModule" flag="required">
				<module-option name="roles">Planon</module-option>
				<!-- for auditing, these are the default values -->
				<module-option name="enableAuditing">true</module-option>
				<module-option name="failedLoginDelay">1</module-option>
				<module-option name="failedLoginThreshold">3</module-option>
				<module-option name="loginUnlockDelay">300</module-option>
			</login-module>

		</authentication>
	</application-policy>

	<!-- Used by clients within the application server VM such as
	    mbeans and servlets that access EJBs.
	-->
	
	<!-- Used by Planon5 webclient -->
	<application-policy name="PlanonWebclientLogin">
	   	<authentication>
			<login-module code="org.jboss.security.ClientLoginModule" flag="required">
			</login-module>
		</authentication>
	</application-policy>

	<!-- ExchangeLink client (setup as trusted service) -->
	<application-policy name="ExchangeClientLoginConfiguration">
		<authentication>
			<login-module code="nl.planon.hades.client.authentication.jboss.TrustedServiceClientLoginModule" flag="required">
				<!-- Designate the required keystore (relative path to 'bin' location) -->
				<module-option name="keystore">${jboss.server.home.dir}/exchangeKeystore.jks</module-option>
				<module-option name="alias">EXCHANGE</module-option>
				<module-option name="debug">false</module-option>
			</login-module>
		</authentication>
	</application-policy>

	<application-policy name="SchedulerEngineClientLoginConfiguration">
		<authentication>
			<login-module code="nl.planon.hades.client.authentication.jboss.TrustedServiceClientLoginModule" flag="required">
				<module-option name="keystore">${jboss.server.home.dir}/schedulerKeystore.jks</module-option>
				<module-option name="alias">SCHEDULER</module-option>
				<module-option name="debug">false</module-option>
			</login-module>
		</authentication>
	</application-policy>
				
	<application-policy name="auth-planon-client">
	    <authentication>
	         <login-module code="nl.planon.hades.client.authentication.jboss.JBossClientLoginModule" flag="sufficient"/>
	    </authentication>
	</application-policy>
				
    		
			<application-policy name="client-login">
       <authentication>
          <login-module code = "org.jboss.security.ClientLoginModule"
             flag = "required">
             <!-- Any existing security context will be restored on logout -->
             <module-option name="restore-login-identity">true</module-option>
          </login-module>
       </authentication>
    </application-policy>

  <!-- A template configuration for hornetq. This
    defaults to the UsersRolesLoginModule the same as other and should be
    changed to a stronger authentication mechanism as required.
  -->
  <application-policy name="hornetq">
    <authentication>
      <login-module code="org.jboss.security.auth.spi.UsersRolesLoginModule"
        flag="required">
	    <module-option name = "unauthenticatedIdentity">guest</module-option>
        <module-option name="usersProperties">props/hornetq-users.properties</module-option>
        <module-option name="rolesProperties">props/hornetq-roles.properties</module-option>
      </login-module>
    </authentication>
  </application-policy>

    <!-- Security domain for JBossMQ -->
    <application-policy name = "jbossmq">
       <authentication>
          <login-module code = "org.jboss.security.auth.spi.DatabaseServerLoginModule"
             flag = "required">
             <module-option name = "unauthenticatedIdentity">guest</module-option>
             <module-option name = "dsJndiName">java:/DefaultDS</module-option>
             <module-option name = "principalsQuery">SELECT PASSWD FROM JMS_USERS WHERE USERID=?</module-option>
             <module-option name = "rolesQuery">SELECT ROLEID, 'Roles' FROM JMS_ROLES WHERE USERID=?</module-option>
          </login-module>
       </authentication>
    </application-policy>

    <!-- Security domain for JBossMQ when using file-state-service.xml
    <application-policy name = "jbossmq">
       <authentication>
          <login-module code = "org.jboss.mq.sm.file.DynamicLoginModule"
             flag = "required">
             <module-option name = "unauthenticatedIdentity">guest</module-option>
             <module-option name = "sm.objectname">jboss.mq:service=StateManager</module-option>
          </login-module>
       </authentication>
    </application-policy>
    -->

    <!-- Security domains for testing new jca framework -->
    <application-policy name = "HsqlDbRealm">
       <authentication>
          <login-module code = "org.jboss.resource.security.ConfiguredIdentityLoginModule"
             flag = "required">
             <module-option name = "principal">sa</module-option>
             <module-option name = "userName">sa</module-option>
             <module-option name = "password"></module-option>
             <module-option name = "managedConnectionFactoryName">jboss.jca:service=LocalTxCM,name=DefaultDS</module-option>
          </login-module>
       </authentication>
    </application-policy>

    <application-policy name = "JmsXARealm">
       <authentication>
          <login-module code = "org.jboss.resource.security.ConfiguredIdentityLoginModule"
             flag = "required">
             <module-option name = "principal">guest</module-option>
             <module-option name = "userName">guest</module-option>
             <module-option name = "password">guest</module-option>
             <module-option name = "managedConnectionFactoryName">jboss.jca:service=TxCM,name=JmsXA</module-option>
          </login-module>
       </authentication>
    </application-policy>

    <!-- A template configuration for the jmx-console web application. This
      defaults to the UsersRolesLoginModule the same as other and should be
      changed to a stronger authentication mechanism as required.
    -->
    <application-policy name = "jmx-console">
       <authentication>
          <login-module code="org.jboss.security.auth.spi.UsersRolesLoginModule"
             flag = "required">
           <module-option name="usersProperties">props/jmx-console-users.properties</module-option>
           <module-option name="rolesProperties">props/jmx-console-roles.properties</module-option>
          </login-module>
       </authentication>
    </application-policy>

    <!-- A template configuration for the web-console web application. This
      defaults to the UsersRolesLoginModule the same as other and should be
      changed to a stronger authentication mechanism as required.
    -->
    <application-policy name = "web-console">
       <authentication>
          <login-module code="org.jboss.security.auth.spi.UsersRolesLoginModule"
             flag = "required">
             <module-option name="usersProperties">web-console-users.properties</module-option>
             <module-option name="rolesProperties">web-console-roles.properties</module-option>
          </login-module>
       </authentication>
    </application-policy>

    <!--
      A template configuration for the JBossWS security domain.
      This defaults to the UsersRolesLoginModule the same as other and should be
      changed to a stronger authentication mechanism as required.
    -->
    <application-policy name="JBossWS">
      <authentication>
        <login-module code="org.jboss.security.auth.spi.UsersRolesLoginModule"
          flag="required">
          <module-option name="usersProperties">props/jbossws-users.properties</module-option>
          <module-option name="rolesProperties">props/jbossws-roles.properties</module-option>
          <module-option name="unauthenticatedIdentity">anonymous</module-option>
        </login-module>
      </authentication>
    </application-policy>

    <!-- The default login configuration used by any security domain that
    does not have a application-policy entry with a matching name
    -->

</policy>

