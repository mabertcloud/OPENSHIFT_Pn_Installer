#!/bin/bash
# vi: set sw=4 ts=4 ai:

# OpenShift cartridge function and constant library.
# Source this file in the top of the program

# Make sure all language settings are correct
export LANG=C

# Set the PATH
export PATH=/bin/:/usr/bin:${PATH}

# Constants
export PLANON="${OPENSHIFT_PLN_DIR}/PlanonProCenter"

export JBOSS_VERSION="jboss-6.1.0"
export JBOSS="${PLANON}/${JBOSS_VERSION}.Final"
export JBOSS_DEPLOY="${JBOSS}/server/default/deploy"
export JBOSS_CONF="${JBOSS}/server/default/conf"
export JBOSS_BUNDLES="${JBOSS}/server/default/bundles"

export TOMCAT_VERSION="tomcat-7.0.52"
export TOMCAT="${PLANON}/${TOMCAT_VERSION}"
export TOMCAT_WEBAPPS="${TOMCAT}/webapps"
export TOMCAT_CONF="${TOMCAT}/conf"
export TOMCAT_BUNDLES="${TOMCAT}/bundles"


export TOMCATPID="${OPENSHIFT_PLN_DIR}/run/tomcat.pid"
export JBOSSPID="${OPENSHIFT_PLN_DIR}/run/jboss.pid"
#
# Needed for Tomcat, but called CATALINA
#
export CATALINA_PID="${TOMCATPID}"


if [[ x"${version:-}" != x"" ]]
then
	export DOWNLOAD_FILE_JBOSS="${version}-jboss.zip"
	export DOWNLOAD_FILE_TOMCAT="${version}-tomcat.zip"
	export DOWNLOAD_FILE_WEBDAV="${version}-webdav.zip"
	export DOWNLOAD_FILE_WEBSTART="${version}-webstart.zip"
	export DOWNLOAD_FILE_CLOUD="${version}-cloud.zip"
fi
#
export DOWNLOAD_LOCATION="${PLANON_ARTIFACT_URL}"


# Return date/time in standard format
now()
{
	date '+%Y-%m-%d %H:%M:%S'
}


# Display a status message
showstatus()
{	RC="${1:-1}"
	shift
	message="${*:-Unknown message}"

	[[ ${RC} == 0 ]] && STATTXT="OK " || STATTXT="ERR"
	str="$(printf -- "%s - %-3d - %s - %s\n" "$(now)" "${RC}" "${STATTXT}" "${message}")"

	printf -- "${str}\n" >&2

	if ! tty -s > /dev/null
	then
		if [[ x"${RC}" == x"0" ]]
		then
			client_result "${str}"
			printf "\n"
		else
			client_error "${str}"
			printf "\n"
		fi
	fi
}


share()
{
	if [[ x"${1}" = x"create" ]]
	then
	    #
		# Create data mount for customer
		# Unmount with: fusermount -u ${OPENSHIFT_PLN_DIR}/mount
		#
		# For this to work, make sure the file /etc/fuse.conf
		# contains:
		#		user_allow_other
		#
		CUSTSHARE=$(cat ${OPENSHIFT_PLN_DIR}/conf/keys/share.mnt)
		mountpoint -q ${OPENSHIFT_PLN_DIR}/mount ||							\
			sshfs															\
				-o allow_other												\
				-o workaround=all											\
				-o idmap=user												\
				-o IdentityFile=${OPENSHIFT_PLN_DIR}/conf/keys/share.priv	\
				-o StrictHostKeyChecking=no									\
				-o UserKnownHostsFile=/dev/null								\
				-o reconnect												\
				${CUSTSHARE}												\
				${OPENSHIFT_PLN_DIR}/mount
		showstatus "0" "mount : ${1}"		
	else
		fusermount -u ${OPENSHIFT_PLN_DIR}/mount
	fi
}

# Get a file from the web
getcockpit()
{
	SRC="${1}"
	DST="${2}"

	wget -q --http-user=cockpit 		\
		--http-password=test1234 		\
		--output-document="${DST}" 		\
	 	 "${SRC}"

	 RC=${?}

	 # Check the wget exitcode. If it's 0, return to the calling
	 # program/function. If it's NOT 0, there is some kind of error
	 # and we cannot continue. Just exit!!
	 case ${RC}
	 in
	 	0)	return 0								;;
	 	1)	MSG="Generic error code"				;;
	 	2)	MSG="Parse error"						;;
	 	3)	MSG="File I/O error"					;;
	 	4)	MSG="Network failure"					;;
	 	5)	MSG="SSL verification failure"			;;
	 	6)	MSG="Authentication failure"			;;
	 	7)	MSG="Protocol error"					;;
	 	8)	MSG="Server issued an error response"	;;
	 	*)	MSG="Unknown error response"			;;
	 esac

     case ${RC}
	 in
	    0)	return 0								;;
        *)	showstatus "${RC}" "wget: ${MSG} Cockpit ${1}"		;;
	 esac
	
	exit ${RC}
}

getartifact()
{
	SRC="${1}"
	DST="${2}"

	wget -q --output-document="${DST}" 	\
	 	 "${DOWNLOAD_LOCATION}${version}/${SRC}"

	RC=${?}

	 # Check the wget exitcode. If it's 0, return to the calling
	 # program/function. If it's NOT 0, there is some kind of error
	 # and we cannot continue. Just exit!!
	 case ${RC}
	 in
	 	0)	return 0								;;
	 	1)	MSG="Generic error code"				;;
	 	2)	MSG="Parse error"						;;
	 	3)	MSG="File I/O error"					;;
	 	4)	MSG="Network failure"					;;
	 	5)	MSG="SSL verification failure"			;;
	 	6)	MSG="Authentication failure"			;;
	 	7)	MSG="Protocol error"					;;
	 	8)	MSG="Server issued an error response"	;;
	 	*)	MSG="Unknown error response"			;;
	 esac

     case ${RC}
	 in
	    0)	return 0								;;
        *)	showstatus "${RC}" "wget: ${MSG} Artifact ${1}"		;;
	 esac

	exit ${RC}
}
