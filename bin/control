#!/bin/bash
# vi: set sw=4 ts=4 ai:

# Syntax:
#	control start|stop|status|restart [what]
#
#   The 'what' can be 'jboss' or 'tomcat' and the default
#	being 'all'.
#
# 	Example: control restart jboss
#	will only restart the jboss server
#

# Determine the program name and the 'running directory'
IAM="${0##*/}"
CRD="$( [[ "${0:0:2}" = "./" ]] &&
	{	printf "${PWD}/${0#./}"
	} || {
		printf "${0}"
	})"
CRD="${CRD%/*}"
CUR="${PWD}"

# Make sure all language settings are correct
export LANG=C

# Save the shell settings
SETA=0; [[ ${-} = *a* ]] && SETA=1
SETE=0; [[ ${-} = *e* ]] && SETE=1
SETU=0; [[ ${-} = *u* ]] && SETU=1
SETX=0; [[ ${-} = *x* ]] && SETX=1

# Set and unset the needed shell settings
set +o noclobber		# Overwrite existing files, if needed
set -o nounset			# Don't allow uninitialized variables
set +o errexit			# No returncode checking

# Set the PATH
PATH=/bin:/usr/bin:${PATH}

# Read the OpenShift functions
source ${OPENSHIFT_CARTRIDGE_SDK_BASH}

# Set constants and read constants
LIBDIR="${CRD}/../lib"
LIBRARY="${LIBDIR}/library"
[[ ! -r ${LIBRARY} ]] && { echo "${LIBRARY} not found"; exit 1; }
. ${LIBRARY} || { echo "Error reading ${LIBRARY}"; exit 1; }


# Check if the process is running
# ${1} is the PID file for the app (Tomcat / JBoss)
isrunning() {
	PIDFILE="${1}"

	# Check for running app
	if [[ -f "${PIDFILE}" ]]
	then
		running=$(/bin/ps --no-headers --pid $(<${PIDFILE}))
		if [[ x"${running}" = x"" ]]
		then
			# Not running
			return 1
		else
			# running
			return 0
		fi
	fi

	# No PID file. Not running
	return 1
}


# Kill the process given by ${1} and its children
killtree() {
	local _pid="${1}"
	showstatus "0" "killtree ${1}"
	for _child in $(ps -o pid --no-headers --ppid ${_pid})
	do
		killtree ${_child}
	done

	local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
	if [[ x"${should_be_gone_pid}" = x"" ]]
	then
		return
	else
		# process might have finished stopping after the ps check above
		# so prevent kill from throwing an error
		# with || true
		kill -TERM ${_pid} || true
	fi

	local count=0
	while [[ ${count} -lt 15 ]]
	do
		local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
		if [[ x"${should_be_gone_pid}" = x"" ]]
		then
			return
		else
			sleep 2
			count=$(( ${count} + 1 ))
		fi
	done

	local should_be_gone_pid=$(ps -o pid -p ${_pid} --no-headers)
	if [[ x"${should_be_gone_pid}" != x"" ]]
	then
		kill -9 ${_pid}
	fi
}

mount()
{
	share $1
}

# Start all services
start()
{
	progs="${1:-all}"

	typeset -i RC=0
	showstatus "0" "start"
	showstatus "0" "	Start planon cartridge runtime"

	# Create the file share mount
	share 'create'

	showstatus "0" "	Starting......."

	if [[ ( x"${progs}" = x"all" ) || ( x"${progs}" = x"jboss" ) ]]
	then
		# Check if JBoss is running
		if isrunning ${JBOSSPID}
		then
			showstatus "1" "Program JBoss is already running"
		else
			showstatus "0" "Program JBoss is not running, trying to start it."
			source ${OPENSHIFT_PLN_DIR}/conf/jboss_settings
			nohup ${JBOSS}/bin/run.sh				\
				-H ${OPENSHIFT_PLN_IP}				\
				-b ${OPENSHIFT_PLN_IP} >/dev/null 2>&1 &
			echo "${!}" > ${JBOSSPID}
		fi
	fi

	sleep 30

	if [[ ( x"${progs}" = x"all" ) || ( x"${progs}" = x"tomcat" ) ]]
	then
		# TOMCAT creates its own PID file in ${CATALINA_PID}
		# We point our ${TOMCATPID} to the same place
		if isrunning ${TOMCATPID}
		then
			showstatus "1" "Program Tomcat is already running"
		else
			showstatus "0" "Program Tomcat is not running, trying to start it."
			source ${OPENSHIFT_PLN_DIR}/conf/tomcat_settings
			nohup ${TOMCAT}/bin/startup.sh >/dev/null 2>&1 &
		fi
	fi

	showstatus "0" "trats"
}


# Stop all services
stop()
{
	progs="${1:-all}"

	showstatus "0" "	Stop openshift cartridge runtime"

	if [[ ( x"${progs}" = x"all" ) || ( x"${progs}" = x"tomcat" ) ]]
	then
		# Check if Tomcat is running
		if isrunning ${TOMCATPID}
		then
			showstatus "0" "Program Tomcat is running, trying to stop it."
			${TOMCAT}/bin/shutdown.sh
		else
			showstatus "0" "Program Tomcat is already stopped"
		fi
		rm -f ${TOMCATPID}
	fi

	if [[ ( x"${progs}" = x"all" ) || ( x"${progs}" = x"jboss" ) ]]
	then
		# Check if Jboss is running
		if isrunning ${JBOSSPID}
		then
			showstatus "0" "Program JBoss is running, trying to stop it."
			pid=$(cat ${JBOSSPID})
			killtree ${pid}
		else
			showstatus "0" "Program JBoss is already stopped"
		fi
		rm -f ${JBOSSPID}
	fi
	return 0
}


# Restart all services
restart()
{
	progs="${1:-all}"

	typeset -i RC=0

	stop "${progs}"		|| RC=RC+1
	sleep 5
	start "${progs}"	|| RC=RC+1
	return ${RC}
}


# Display the status of the services
status()
{
	typeset -i RC=0

	# Check if JBoss is running
	if isrunning ${JBOSSPID}
	then
		showstatus "0" "	JBoss is running"
	else
		showstatus "1" "	JBoss is NOT running"
		RC=RC+1
	fi

	# Check if Tomcat is running
	if isrunning ${TOMCATPID}
	then
		showstatus "0" "	Tomcat is running"
	else
		showstatus "1" "	Tomcat is NOT running"
		RC=RC+1
	fi

	return ${RC}
}


catchall()
{
	showstatus "1" "	${1:-}: not yet implemented"

	return 0
}


showstatus "0" "Control Main called"
case "${1:-}"
in
	start)					start   "${2:-all}"	;;
	stop)					stop    "${2:-all}"	;;
	restart)				restart	"${2:-all}"	;;
	status)					status				;;
    mount)                  mount    "${2:-create}"  ;; 
	deploy)					catchall "${1}"		;;
	reload)					catchall "${1}"		;;
	tidy)					catchall "${1}"		;;
	pre-build)				catchall "${1}"		;;
	build)					catchall "${1}"		;;
	post-deploy)			catchall "${1}"		;;
	pre-repo-archive)		catchall "${1}"		;;
	update-configuration)	catchall "${1}"		;;
	*)						catchall "Unknown"	;;
esac

# Exit. No exit code!! The exit code will be the exit code
# of the last run process!!
exit
